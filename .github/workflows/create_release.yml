name: Bump Version, Create Release, and Upload Artifacts

on:
  pull_request:
    types: [closed]
    branches: [master, main]

permissions:
  contents: write
  checks: write
  actions: read
  issues: read
  packages: write
  pull-requests: read
  repository-projects: read
  statuses: read

jobs:
  bump_version_and_create_release:
    name: Bump version and create release
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.test_tag_version.outputs.new_tag }}
    if: ${{ github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'bump') }}
    steps:
      - uses: actions/checkout@v5

      - name: Install Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.8'

      - name: Determine Default bump type
        id: determine_default_bump
        run: |
          labels=$(cat <<EOF
          ${{ toJson(github.event.pull_request.labels) }}
          EOF
          )
          labels=$(echo "$labels" | jq -r '.[].name')
          if echo "$labels" | grep -q "major"; then
            echo "label_bump=major" >> $GITHUB_ENV
          elif echo "$labels" | grep -q "minor"; then
            echo "label_bump=minor" >> $GITHUB_ENV
          else
            echo "label_bump=patch" >> $GITHUB_ENV
          fi

      - name: Calculate bumped version
        id: test_tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: ${{ env.label_bump }}
          dry_run: true

      - name: Run version bump script
        run: |
          python3 Scripts/increment_version.py ${{ steps.test_tag_version.outputs.new_tag }}

      - name: Set up Git and Push changes
        env:
          github_token: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: bump the Flakkari version to ${{ steps.test_tag_version.outputs.new_tag }}" || true
          git push || true

      - name: Create Tag
        id: tag_version
        env:
          github_token: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ steps.test_tag_version.outputs.new_tag }}
          git push origin ${{ steps.test_tag_version.outputs.new_tag }}

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1.20.0
        with:
          tag: ${{ steps.test_tag_version.outputs.new_tag }}
          name: Flakkari ${{ steps.test_tag_version.outputs.new_tag }}
          body: ${{ steps.test_tag_version.outputs.changelog }}
          generateReleaseNotes: true

  build_and_upload_artifacts:
    name: Build and Upload Artifacts
    needs: bump_version_and_create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Install xmake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest
          actions-cache-folder: '.xmake-cache'
          actions-cache-key: '${{ runner.os }}-xmake-install'
          package-cache: true
          package-cache-key: '${{ runner.os }}-xmake-nlohmann_json-libcurl-libgit2'
          project-path: '.'

      - name: Build Flakkari Package with xpack
        run: |
          xmake f -y -m release
          xmake pack -y

      - name: List built xpack files
        run: ls -la ./build/xpack/flakkari || true

      - name: Upload Artifacts to Release (robust)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ needs.bump_version_and_create_release.outputs.new_tag }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Getting release upload URL for $REPO tag $TAG"
          api="https://api.github.com/repos/$REPO/releases/tags/$TAG"
          upload_url=""
          # Retry fetching the release for a short period to avoid races
          for i in {1..10}; do
            upload_url=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$api" | python3 -c "import sys,json; j=json.load(sys.stdin); print(j.get('upload_url',''))") || true
            if [ -n "$upload_url" ] && [ "$upload_url" != "null" ]; then
              break
            fi
            echo "Release not found yet (attempt $i), retrying in 3s..."
            sleep 3
          done
          if [ -z "$upload_url" ] || [ "$upload_url" = "null" ]; then
            echo "Release not found for tag $TAG after retries"
            exit 1
          fi
          # strip the template part: {?name,label}
          upload_url=${upload_url%\{*}
          echo "Upload URL: $upload_url"
          shopt -s nullglob
          files=(./build/xpack/flakkari/*)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No artifacts found in ./build/xpack/flakkari"
            exit 0
          fi
          for f in "${files[@]}"; do
            fname=$(basename "$f")
            echo "Uploading $fname..."
            # retry curl a few times for transient failures
            curl --fail -s -S -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$f" \
              --retry 3 --retry-delay 2 \
              "$upload_url?name=$fname"
            echo "Uploaded $fname"
          done
